var searchIndex = {};
searchIndex['lib'] = {"items":[[0,"","lib",""],[3,"Uuid","",""],[5,"uuid_compare","",""],[5,"uuid_generate","",""],[5,"uuid_is_null","",""],[5,"uuid_clear","",""],[5,"uuid_copy","",""],[11,"clone","","",0],[11,"eq","","",0],[11,"ne","","",0],[11,"fmt","","",0],[11,"new","","",0],[11,"generate","","Generate a new uuid\n```\n assert!(Uuid::new() != Uuid::generate());\n```",0],[11,"compare","","Compares uuids\n```\n assert!(Uuid::compare(Uuid::generate() != Uuid::generate()));\n```",0],[11,"clear","","Clear a uuid\n```\n let clear_uuid = Uuid::new();\n let mut uuid_to_clear = Uuid::generate().unwrap();\n Uuid::clear(&mut uuid_to_clear);\n debug_assert_eq!(clear_uuid, uuid_to_clear);\n```",0],[11,"is_null","","Checks if a uuid is clean\n```\n let clear_uuid = Uuid::new();\n let mut uuid_to_clear = Uuid::generate().unwrap();\n Uuid::clear(&mut uuid_to_clear);\n debug_assert_eq!(clear_uuid, uuid_to_clear);\n```",0],[11,"copy","","Copies from one uuid to another\n```\nlet original = Uuid::generate();\nlet mut copy = Uuid::new();\nUuid::copy(&original, &mut copy);\nassert_eq!(original, copy);\n```",0]],"paths":[[3,"Uuid"]]};
initSearch(searchIndex);
